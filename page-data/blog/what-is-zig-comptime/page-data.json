{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/what-is-zig-comptime/","webpackCompilationHash":"96fa962e26c965f95f07","result":{"data":{"site":{"siteMetadata":{"title":"Loris Cro's Personal Blog","author":"Loris Cro"}},"markdownRemark":{"id":"f37df7cf-7ffc-5b6f-b3c3-cef539ec6d00","excerpt":"If you’ve only experienced compile-time execution in the form of macros, generics or codegen, be ready to be surprised by what Zig can do. What is Zig Zig is a…","html":"<p>If you’ve only experienced compile-time execution in the form of macros, generics or codegen, be ready to be surprised by what Zig can do.</p>\n<h2 id=\"what-is-zig\"><a href=\"#what-is-zig\" aria-label=\"what is zig permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is Zig</h2>\n<p>Zig is a new general-purpose programming language developed by Andrew Kelley. While still under heavy development, I think the language is already showing great promise. Zig aims to be a better C, similarly to how Rust can be understood as a better C++, generally speaking. Zig has no garbage collection, no built-in event loops, nor other runtime machinery of that level. It’s lean just like C, and in fact it can interoperate with C pretty easily. For a complete overview checkout <a href=\"https://ziglang.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ziglang.org</a>. </p>\n<p>Now that you got a general idea about the level of abstraction in which Zig operates, you won’t be surprised to know that there is absolutely no support for reflection at runtime; but what you can’t do a runtime, you can certainly do at compile-time.</p>\n<h2 id=\"running-code-at-compile-time\"><a href=\"#running-code-at-compile-time\" aria-label=\"running code at compile time permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running code at compile-time</h2>\n<p>Let’s start with the basics: using the <code>comptime</code> keyword to run arbitrary code at compilation-time.</p>\n<h4 id=\"compile-time-function-calls\"><a href=\"#compile-time-function-calls\" aria-label=\"compile time function calls permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compile-time function calls</h4>\n<p>The following code uses a function to decide the length of a statically-allocated array.</p>\n<div class=\"vscode-highlight-wrapper\"><pre class=\"dark-default-dark vscode-highlight\" data-language=\"zig\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">fn</span><span class=\"mtk1\"> multiply(a: </span><span class=\"mtk4\">i64</span><span class=\"mtk1\">, b: </span><span class=\"mtk4\">i64</span><span class=\"mtk1\">) </span><span class=\"mtk4\">i64</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> a * b;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">pub</span><span class=\"mtk1\"> </span><span class=\"mtk4\">fn</span><span class=\"mtk1\"> main() </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> len = </span><span class=\"mtk4\">comptime</span><span class=\"mtk1\"> multiply(</span><span class=\"mtk7\">4</span><span class=\"mtk1\">, </span><span class=\"mtk7\">5</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> my_static_array: [len]</span><span class=\"mtk4\">u8</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">undefined</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre></div>\n<p>Note how the function definition doesn’t have any attribute that states it must be available at compile-time. It’s just a normal function, and we request its compile-time execution at the call site.</p>\n<h4 id=\"compile-time-blocks\"><a href=\"#compile-time-blocks\" aria-label=\"compile time blocks permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compile-time blocks</h4>\n<p>You can also use <code>comptime</code> to define a compile-time block inside a function. The following example is a case-insensitive string compare function that is optimized for the use-case where one of the two strings is hardcoded. Compile-time execution ensures that the function doesn’t get misused.</p>\n<div class=\"vscode-highlight-wrapper\"><pre class=\"dark-default-dark vscode-highlight\" data-language=\"zig\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// Compares two strings ignoring case (ascii strings only).</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// Specialzied version where &#96;uppr&#96; is comptime known and *uppercase*.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">fn</span><span class=\"mtk1\"> insensitive_eql(</span><span class=\"mtk4\">comptime</span><span class=\"mtk1\"> uppr: []</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">u8</span><span class=\"mtk1\">, str: []</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">u8</span><span class=\"mtk1\">) </span><span class=\"mtk4\">bool</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk1\">    </span><span class=\"mtk4\">comptime</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk1\">        </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> i = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk1\">        </span><span class=\"mtk4\">while</span><span class=\"mtk1\"> (i &lt; uppr.len) : (i += </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk1\">            </span><span class=\"mtk4\">if</span><span class=\"mtk1\"> (uppr[i] &gt;= </span><span class=\"mtk8\">&#39;a&#39;</span><span class=\"mtk1\"> </span><span class=\"mtk4\">and</span><span class=\"mtk1\"> uppr[i] &lt;= </span><span class=\"mtk8\">&#39;z&#39;</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk1\">                </span><span class=\"mtk11\">@compileError</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;&#96;uppr&#96; must be all uppercase&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk1\">            }</span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> i = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">while</span><span class=\"mtk1\"> (i &lt; uppr.len) : (i += </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> val = </span><span class=\"mtk4\">if</span><span class=\"mtk1\"> (str[i] &gt;= </span><span class=\"mtk8\">&#39;a&#39;</span><span class=\"mtk1\"> </span><span class=\"mtk4\">and</span><span class=\"mtk1\"> str[i] &lt;= </span><span class=\"mtk8\">&#39;z&#39;</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            str[i] - </span><span class=\"mtk7\">32</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">else</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            str[i];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">if</span><span class=\"mtk1\"> (val != uppr[i]) </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">pub</span><span class=\"mtk1\"> </span><span class=\"mtk4\">fn</span><span class=\"mtk1\"> main() </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> x = insensitive_eql(</span><span class=\"mtk8\">&quot;Hello&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;hElLo&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre></div>\n<p>Compilation of this program fails and produces the following output.</p>\n<div class=\"vscode-highlight-wrapper\">\n<pre class=\"dark-default-dark vscode-highlight\" data-language=\"shell\">\n<code class=\"vscode-highlight-code vscode-highlight-line\"><span class=\"bold\"><span class=\"f2\">➜</span></span> zig build-exe ieq.zig                                       \n<span class=\"bold\">/Users/loriscro/ieq.zig:8:17: <span class=\"f1\"><span class=\"bold\">error:</span></span> `uppr` must be all uppercase</span>\n                @compileError(&quot;`uppr` must be all uppercase&quot;);\n                <span class=\"f2\"><span class=\"bold\">^</span></span>\n<span class=\"bold\">/Users/loriscro/ieq.zig:24:30: <span class=\"f6\"><span class=\"bold\">note:</span></span> called from here</span>\n    const x = insensitive_eql(&quot;Hello&quot;, &quot;hElLo&quot;);\n                             <span class=\"f2\"><span class=\"bold\">^</span></span>\n</code>\n</pre>\n</div>\n<h4 id=\"compile-time-code-elision\"><a href=\"#compile-time-code-elision\" aria-label=\"compile time code elision permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compile-time code elision</h4>\n<p>Zig can statically resolve control flow expressions that depend on compile-time known values. For example, you can force loop unrolling on <code>while</code> / <code>for</code> loops and elide branches from <code>if</code> / <code>switch</code> statements. The following program asks the user for a number and then iteratively applies a list of operations to it:</p>\n<div class=\"vscode-highlight-wrapper\"><pre class=\"dark-default-dark vscode-highlight\" data-language=\"zig\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> builtin = </span><span class=\"mtk11\">@import</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;builtin&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> std = </span><span class=\"mtk11\">@import</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;std&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> fmt = std.fmt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> io = std.io;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> Op = </span><span class=\"mtk4\">enum</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    Sum,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    Mul,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    Sub,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">fn</span><span class=\"mtk1\"> ask_user() !</span><span class=\"mtk4\">i64</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> buf: [</span><span class=\"mtk7\">10</span><span class=\"mtk1\">]</span><span class=\"mtk4\">u8</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">undefined</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    std.debug.warn(</span><span class=\"mtk8\">&quot;A number please: &quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> user_input = </span><span class=\"mtk4\">try</span><span class=\"mtk1\"> io.readLineSlice(buf[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">..]);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> fmt.parseInt(</span><span class=\"mtk4\">i64</span><span class=\"mtk1\">, user_input, </span><span class=\"mtk7\">10</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">fn</span><span class=\"mtk1\"> apply_ops(</span><span class=\"mtk4\">comptime</span><span class=\"mtk1\"> operations: []</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> Op, num: </span><span class=\"mtk4\">i64</span><span class=\"mtk1\">) </span><span class=\"mtk4\">i64</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> acc: </span><span class=\"mtk4\">i64</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk1\">    </span><span class=\"mtk4\">inline</span><span class=\"mtk1\"> </span><span class=\"mtk4\">for</span><span class=\"mtk1\"> (operations) |op| {</span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk1\">        </span><span class=\"mtk4\">switch</span><span class=\"mtk1\"> (op) {</span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk1\">            .Sum =&gt; acc +%= num,</span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk1\">            .Mul =&gt; acc *%= num,</span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk1\">            .Sub =&gt; acc -%= num,</span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> acc;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">pub</span><span class=\"mtk1\"> </span><span class=\"mtk4\">fn</span><span class=\"mtk1\"> main() !</span><span class=\"mtk4\">void</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> user_num = </span><span class=\"mtk4\">try</span><span class=\"mtk1\"> ask_user();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> ops = [</span><span class=\"mtk7\">4</span><span class=\"mtk1\">]Op{.Sum, .Mul, .Sub, .Sub};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> x = apply_ops(ops[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">..], user_num);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    std.debug.warn(</span><span class=\"mtk8\">&quot;Result: {}</span><span class=\"mtk6\">\\n</span><span class=\"mtk8\">&quot;</span><span class=\"mtk1\">, x);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre></div>\n<p>The interesting part of this code is the <code>for</code> loop. The <code>inline</code> keyword forces loop unrolling, and inside the loop’s body there is a <code>switch</code> statement that also gets resolved at compile-time. In short, the invocation of <code>apply_ops</code> in the previous example basically resolves to:</p>\n<div class=\"vscode-highlight-wrapper\"><pre class=\"dark-default-dark vscode-highlight\" data-language=\"zig\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> acc: </span><span class=\"mtk4\">i64</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">acc +%= num;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">acc *%= num;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">acc -%= num;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">acc -%= num;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">return</span><span class=\"mtk1\"> acc;</span></span></code></pre></div>\n<p>To test that this is really what’s happening, paste the program code in <a href=\"https://godbolt.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://godbolt.org</a>, select Zig as target language, and then select a version of Zig greater than 0.4.0 (at the moment of writing you must select “zig trunk”). Godbolt will compile the code and show you the generated assembly. Right-click on a line of code, and a contextual menu will let you jump to the assembly code that the line corresponds to. You will notice that neither the <code>for</code> loop, nor the <code>switch</code> correspond to any assembly. Remove the <code>inline</code> keyword, and they will now show up.</p>\n<h2 id=\"generics\"><a href=\"#generics\" aria-label=\"generics permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generics</h2>\n<p>The <code>comptime</code> keyword indicates code regions and values that must be resolved at compile-time. In the previous examples we used it to perform something similar to template metaprogramming, but it can also be used for generic programming, since types are valid compile-time values.</p>\n<h4 id=\"generic-functions\"><a href=\"#generic-functions\" aria-label=\"generic functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic functions</h4>\n<p>Since generic programming is tied to <code>comptime</code> arguments, Zig doesn’t have the <em>traditional</em> diamond bracket syntax. Other than that, basic usage of generics is very similar to other languages. The following code is Zig’s implementation of <code>mem.eql</code>, taken from the standard library. It’s used to test two slices for equality.</p>\n<div class=\"vscode-highlight-wrapper\"><pre class=\"dark-default-dark vscode-highlight\" data-language=\"zig\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">/// Compares two slices and returns whether they are equal.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">pub</span><span class=\"mtk1\"> </span><span class=\"mtk4\">fn</span><span class=\"mtk1\"> eql(</span><span class=\"mtk4\">comptime</span><span class=\"mtk1\"> T: </span><span class=\"mtk4\">type</span><span class=\"mtk1\">, a: []</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> T, b: []</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> T) </span><span class=\"mtk4\">bool</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">if</span><span class=\"mtk1\"> (a.len != b.len) </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">for</span><span class=\"mtk1\"> (a) |item, index| {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">if</span><span class=\"mtk1\"> (b[index] != item) </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre></div>\n<p>As you can see, <code>T</code> is a variable of type <code>type</code> and the subsequent arguments use it as a generic parameter. This way it’s possible to use <code>mem.eql</code> with any kind of slice.</p>\n<p>It’s also possible to do introspection on values of type <code>type</code>. In a previous example we parsed an integer number from user input and requested a specific type of integer. The parsing function uses that information to elide some code from its generic implementation.</p>\n<div class=\"vscode-highlight-wrapper\"><pre class=\"dark-default-dark vscode-highlight\" data-language=\"zig\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// This is the line in &#96;apply_ops&#96; where we parsed a number</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">return</span><span class=\"mtk1\"> fmt.parseInt(</span><span class=\"mtk4\">i64</span><span class=\"mtk1\">, user_input, </span><span class=\"mtk7\">10</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// This is the stdlib implementation of &#96;parseInt&#96;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">pub</span><span class=\"mtk1\"> </span><span class=\"mtk4\">fn</span><span class=\"mtk1\"> parseInt(</span><span class=\"mtk4\">comptime</span><span class=\"mtk1\"> T: </span><span class=\"mtk4\">type</span><span class=\"mtk1\">, buf: []</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">u8</span><span class=\"mtk1\">, radix: </span><span class=\"mtk4\">u8</span><span class=\"mtk1\">) !T {</span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk1\">    </span><span class=\"mtk4\">if</span><span class=\"mtk1\"> (!T.is_signed) </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> parseUnsigned(T, buf, radix);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">if</span><span class=\"mtk1\"> (buf.len == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> T(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">if</span><span class=\"mtk1\"> (buf[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] == </span><span class=\"mtk8\">&#39;-&#39;</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> math.negate(</span><span class=\"mtk4\">try</span><span class=\"mtk1\"> parseUnsigned(T, buf[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">..], radix));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    } </span><span class=\"mtk4\">else</span><span class=\"mtk1\"> </span><span class=\"mtk4\">if</span><span class=\"mtk1\"> (buf[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] == </span><span class=\"mtk8\">&#39;+&#39;</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> parseUnsigned(T, buf[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">..], radix);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    } </span><span class=\"mtk4\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> parseUnsigned(T, buf, radix);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre></div>\n<h4 id=\"generic-structs\"><a href=\"#generic-structs\" aria-label=\"generic structs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic structs</h4>\n<p>Before describing how to create generic structs, here’s a brief introduction on how structs work in Zig.</p>\n<div class=\"vscode-highlight-wrapper\"><pre class=\"dark-default-dark vscode-highlight\" data-language=\"zig\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> std = </span><span class=\"mtk11\">@import</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;std&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> math = std.math;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> assert = std.debug.assert;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// A struct definition doesn&#39;t include a name.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// Assigning the struct to a variable gives it a name.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> Point = </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    x: </span><span class=\"mtk4\">f64</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    y: </span><span class=\"mtk4\">f64</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    z: </span><span class=\"mtk4\">f64</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">\t\t</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// A struct definition can also contain namespaced functions.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// This has no impact on the struct layout.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Struct functions that take a Self parameter, when</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// invoked through a struct instance, will automatically</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// fill the first argument, just like methods do.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> Self = </span><span class=\"mtk11\">@This</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">pub</span><span class=\"mtk1\"> </span><span class=\"mtk4\">fn</span><span class=\"mtk1\"> distance(self: Self, p: Point) </span><span class=\"mtk4\">f64</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> x2 = math.pow(</span><span class=\"mtk4\">f64</span><span class=\"mtk1\">, self.x - p.x, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> y2 = math.pow(</span><span class=\"mtk4\">f64</span><span class=\"mtk1\">, self.y - p.y, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> z2 = math.pow(</span><span class=\"mtk4\">f64</span><span class=\"mtk1\">, self.z - p.z, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> math.sqrt(x2 + y2 + z2);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">pub</span><span class=\"mtk1\"> </span><span class=\"mtk4\">fn</span><span class=\"mtk1\"> main() !</span><span class=\"mtk4\">void</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> p1 = Point{ .x = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, .y = </span><span class=\"mtk7\">2</span><span class=\"mtk1\">, .z = </span><span class=\"mtk7\">8</span><span class=\"mtk1\"> };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> p2 = Point{ .x = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, .y = </span><span class=\"mtk7\">6</span><span class=\"mtk1\">, .z = </span><span class=\"mtk7\">8</span><span class=\"mtk1\"> };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    assert(p1.distance(p2) == </span><span class=\"mtk7\">4</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    assert(Point.distance(p1, p2) == </span><span class=\"mtk7\">4</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre></div>\n<p>We’re now ready to talk about generic structs. To create a generic struct, all you have to do is create a function that takes a type argument and use that argument in your struct definition. Here’s an example lifted from Zig’s documentation. It’s a doubly-linked intrusive list.</p>\n<div class=\"vscode-highlight-wrapper\"><pre class=\"dark-default-dark vscode-highlight\" data-language=\"zig\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">fn</span><span class=\"mtk1\"> LinkedList(</span><span class=\"mtk4\">comptime</span><span class=\"mtk1\"> T: </span><span class=\"mtk4\">type</span><span class=\"mtk1\">) </span><span class=\"mtk4\">type</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">pub</span><span class=\"mtk1\"> </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> Node = </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            prev: ?*Node = </span><span class=\"mtk4\">null</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            next: ?*Node = </span><span class=\"mtk4\">null</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            data: T,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        first: ?*Node = </span><span class=\"mtk4\">null</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        last: ?*Node = </span><span class=\"mtk4\">null</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        len: </span><span class=\"mtk4\">usize</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre></div>\n<p>The function returns a <code>type</code>, which means it can only be called at comptime. It defines two structs:</p>\n<ul>\n<li>The main <code>LinkedList</code> struct</li>\n<li>The <code>Node</code> struct, namespaced inside the main struct</li>\n</ul>\n<p>Just like structs can namespace functions, they can also namespace variables. This is especially useful for introspection when creating composite types. Here’s how <code>LinkedList</code> can be composed with our previous <code>Point</code> struct.</p>\n<div class=\"vscode-highlight-wrapper\"><pre class=\"dark-default-dark vscode-highlight\" data-language=\"zig\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// To try this code, paste both definitions in the same file.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> PointList = LinkedList(Point);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> p = Point{ .x = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, .y = </span><span class=\"mtk7\">2</span><span class=\"mtk1\">, .z = </span><span class=\"mtk7\">8</span><span class=\"mtk1\"> };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> my_list = PointList{};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// A complete implementation would offer an &#96;append&#96; method.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// For now let&#39;s add the new node manually.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> node = PointList.Node{ .data = p };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">my_list.first = &amp;node;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">my_list.last = &amp;node;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">my_list.len = </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span></code></pre></div>\n<p>The Zig standard library contains <a href=\"https://github.com/ziglang/zig/blob/ddf7942aaa6a41296d9338423dcdfb93b915e4df/std/linked_list.zig\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a couple of fleshed out implementations of linked lists</a>.</p>\n<h2 id=\"compile-time-reflection\"><a href=\"#compile-time-reflection\" aria-label=\"compile time reflection permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compile-time reflection</h2>\n<p>Now that we have covered all the basics, we can finally move onto the things that make Zig metaprogramming truly powerful and fun to use. </p>\n<p>We already saw an example of reflection when <code>parseInt</code> was checking <code>T.is_signed</code>, but in this section I want to focus on a more advanced usage of reflection. I’ll introduce the concept with a code sample.</p>\n<div class=\"vscode-highlight-wrapper\"><pre class=\"dark-default-dark vscode-highlight\" data-language=\"zig\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">fn</span><span class=\"mtk1\"> make_couple_of(x: </span><span class=\"mtk4\">var</span><span class=\"mtk1\">) [</span><span class=\"mtk7\">2</span><span class=\"mtk1\">]</span><span class=\"mtk11\">@typeOf</span><span class=\"mtk1\">(x) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> [</span><span class=\"mtk7\">2</span><span class=\"mtk1\">]</span><span class=\"mtk11\">@typeOf</span><span class=\"mtk1\">(x) {x, x};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre></div>\n<p>This — mostly useless — function can take any value as input and creates an array that contains two copies of it. The following invocations are all correct.</p>\n<div class=\"vscode-highlight-wrapper\"><pre class=\"dark-default-dark vscode-highlight\" data-language=\"zig\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">make_couple_of(</span><span class=\"mtk7\">5</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// creates [2]comptime_int{5, 5}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">make_couple_of(</span><span class=\"mtk4\">i32</span><span class=\"mtk1\">(</span><span class=\"mtk7\">5</span><span class=\"mtk1\">)); </span><span class=\"mtk3\">// creates [2]i32{5, 5}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">make_couple_of(</span><span class=\"mtk4\">u8</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// creates [2]type{u8, u8}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">make_couple_of(</span><span class=\"mtk4\">type</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// creates [2]type{type, type}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">make_couple_of(make_couple_of(</span><span class=\"mtk8\">&quot;hi&quot;</span><span class=\"mtk1\">)); </span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// creates [2][2][2]u8{[2][2]u8{&quot;hi&quot;,&quot;hi&quot;}, [2][2]u8{&quot;hi&quot;,&quot;hi&quot;}}</span></span></code></pre></div>\n<p>Arguments of type <code>var</code> are very powerful and allow construction of optimized and yet “dynamic” functions. For the next example I’ll lift some more code from the standard library to showcase a more useful use of this functionality.</p>\n<p>The following code is the implementation of <code>math.sqrt</code>, which we used in a previous example to compute the euclidean distance between two points.</p>\n<div class=\"vscode-highlight-wrapper\"><pre class=\"dark-default-dark vscode-highlight\" data-language=\"zig\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// I moved part of the original definition to</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// a separate function for better readability.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">fn</span><span class=\"mtk1\"> decide_return_type(</span><span class=\"mtk4\">comptime</span><span class=\"mtk1\"> T: </span><span class=\"mtk4\">type</span><span class=\"mtk1\">) </span><span class=\"mtk4\">type</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">@typeId</span><span class=\"mtk1\">(T) == TypeId.Int) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">@IntType</span><span class=\"mtk1\">(</span><span class=\"mtk4\">false</span><span class=\"mtk1\">, T.bit_count / </span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    } </span><span class=\"mtk4\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> T;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line vscode-highlight-line-highlighted\"><span class=\"mtk4\">pub</span><span class=\"mtk1\"> </span><span class=\"mtk4\">fn</span><span class=\"mtk1\"> sqrt(x: </span><span class=\"mtk4\">var</span><span class=\"mtk1\">) decide_return_type(</span><span class=\"mtk11\">@typeOf</span><span class=\"mtk1\">(x)) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> T = </span><span class=\"mtk11\">@typeOf</span><span class=\"mtk1\">(x);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">switch</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">@typeId</span><span class=\"mtk1\">(T)) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        TypeId.ComptimeFloat =&gt; </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> T(</span><span class=\"mtk11\">@sqrt</span><span class=\"mtk1\">(</span><span class=\"mtk4\">f64</span><span class=\"mtk1\">, x)),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        TypeId.Float =&gt; </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">@sqrt</span><span class=\"mtk1\">(T, x),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        TypeId.ComptimeInt =&gt; </span><span class=\"mtk4\">comptime</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk4\">if</span><span class=\"mtk1\"> (x &gt; maxInt(</span><span class=\"mtk4\">u128</span><span class=\"mtk1\">)) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                </span><span class=\"mtk11\">@compileError</span><span class=\"mtk1\">(</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                \t</span><span class=\"mtk8\">&quot;sqrt not implemented for &quot;</span><span class=\"mtk1\"> ++ </span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                \t</span><span class=\"mtk8\">&quot;comptime_int greater than 128 bits&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk4\">if</span><span class=\"mtk1\"> (x &lt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                </span><span class=\"mtk11\">@compileError</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;sqrt on negative number&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> T(sqrt_int(</span><span class=\"mtk4\">u128</span><span class=\"mtk1\">, x));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        },</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        TypeId.Int =&gt; </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> sqrt_int(T, x),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">else</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk11\">@compileError</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;not implemented for &quot;</span><span class=\"mtk1\"> ++ </span><span class=\"mtk11\">@typeName</span><span class=\"mtk1\">(T)),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre></div>\n<p>The return type of this function is a bit peculiar. If you look at the signature of <code>sqrt</code>, it’s calling a function in the place where it should be declaring the return type. This is allowed in Zig. The original code actually inlines an <code>if</code> expression, but I moved it to a separate function for better readability. </p>\n<p>So what is <code>sqrt</code> trying to do with its return type? It’s applying a small optimization when we’re passing in an integer value. In that case the function declares its return type as an <strong>unsigned</strong> integer with <strong>half the bit size</strong> of the original input. This means that, if we’re passing in an <code>i64</code> value, the function will return an <code>u32</code> value. This makes sense given what the square root function does. The rest of the declaration then uses reflection to further specialize and report compile-time errors where appropriate.</p>\n<h2 id=\"in-conclusion\"><a href=\"#in-conclusion\" aria-label=\"in conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In conclusion</h2>\n<p>Compile-time execution is great, especially when the language is very expressive. Without good compile-time metaprogramming, one must resort to macros or codegen, or worse, do a lot of useless work at runtime. </p>\n<p>If you want to see one more cool example of what can be done at compile-time in Zig, <a href=\"https://andrewkelley.me/post/string-matching-comptime-perfect-hashing-zig.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">take a look at this blog post by Andrew himself</a>. In it, he uses some the aforementioned techniques to generate a perfect hashing function for a compile-time known list of strings. The result is that the user can create a switch that matches strings in <code>O(1)</code>. The code is very easy to understand, and he offers some insight on how all the other minor features make user abstractions easy, fun and safe to use.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.dark-default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.dark-default-dark .mtk1 { color: #D4D4D4; }\n.dark-default-dark .mtk2 { color: #1E1E1E; }\n.dark-default-dark .mtk3 { color: #6A9955; }\n.dark-default-dark .mtk4 { color: #569CD6; }\n.dark-default-dark .mtk5 { color: #D16969; }\n.dark-default-dark .mtk6 { color: #D7BA7D; }\n.dark-default-dark .mtk7 { color: #B5CEA8; }\n.dark-default-dark .mtk8 { color: #CE9178; }\n.dark-default-dark .mtk9 { color: #646695; }\n.dark-default-dark .mtk10 { color: #4EC9B0; }\n.dark-default-dark .mtk11 { color: #DCDCAA; }\n.dark-default-dark .mtk12 { color: #9CDCFE; }\n.dark-default-dark .mtk13 { color: #000080; }\n.dark-default-dark .mtk14 { color: #F44747; }\n.dark-default-dark .mtk15 { color: #C586C0; }\n.dark-default-dark .mtk16 { color: #6796E6; }\n.dark-default-dark .mtk17 { color: #808080; }\n.dark-default-dark .mtki { font-style: italic; }\n.dark-default-dark .mtkb { font-weight: bold; }\n.dark-default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","frontmatter":{"title":"What is Zig's Comptime?","date":"August 05, 2019","description":"Let's take a quick look at what compile-time execution looks like in Zig.","notwitch":null,"coauthor_link":null,"coauthor":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/what-is-zig-comptime/","readingTime":{"text":"11 min read"},"previous":{"fields":{"slug":"/blog/simple-not-just-easy/","readingTime":{"text":"10 min read"}},"frontmatter":{"title":"I Want Simple, Not Just Easy"}},"next":{"fields":{"slug":"/blog/why-go-and-not-rust/","readingTime":{"text":"11 min read"}},"frontmatter":{"title":"Why Go and not Rust?"}}}}}