{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/zig-async-await/","webpackCompilationHash":"b589cc8b5e3ab90b7583","result":{"data":{"site":{"siteMetadata":{"title":"Loris Cro's Personal Blog","author":"Loris Cro"}},"markdownRemark":{"id":"6e42128c-c54d-5ddc-8125-671aece8205b","excerpt":"If Zig’s compile-time code execution surprised you (and chances are that it did, since only D and very few other languages can compare), buckle up, because Zig…","html":"<p>If Zig’s <a href=\"/blog/what-is-zig-comptime\">compile-time code execution</a> surprised you (and chances are that it did, since only D and very few other languages can compare), buckle up, because Zig’s take on expressing concurrency is just as interesting, if not even more.</p>\n<h2 id=\"asyncawaits-biggest-problem\"><a href=\"#asyncawaits-biggest-problem\" aria-label=\"asyncawaits biggest problem permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async/Await’s Biggest Problem</h2>\n<p>Before diving into Zig’s syntax, let me remind you of one of the most annoying problems in programming caused by <code>async</code>/<code>await</code>.</p>\n<p>Asyncrhonous functions are different from normal (i.e. syncrhonous) functions and only those can use <code>await</code>.\nThis causes a phenomenon described by Bob Nystrom as <a href=\"https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">function coloring</a> where you have to use a different syntax depending on the type of function you want to invoke.</p>\n<p>This is not a hard limitation, meaning that languages give you plenty of escape hatches to connect syncrhonous and asyncrhonous code, but in practice this disparity of expressiveness (and syntax asymmetry) tends to produce a cascading series of effects:</p>\n<ol>\n<li>Once you place an <code>await</code> in your code, an entire call tree needs to become <code>async</code> </li>\n<li>Once you start defining <code>async</code> function an calling it with <code>await</code>, you start changing more function definitions to be <code>async</code> because . </li>\n<li>Since the syntax has to be different, many libraries that deal with I/O end up having a blocking and a non-blocking version, like most mainstream Python networking libraries and <a href=\"https://github.com/aio-libs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aio-libs</a>.</li>\n</ol>\n<h2 id=\"asyncawait-in-python-3\"><a href=\"#asyncawait-in-python-3\" aria-label=\"asyncawait in python 3 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async/Await in Python 3</h2>\n<p>Before diving in Zig’s concurrency facilities, here’s a quick recap of how async/await looks in mainstream languages by looking at a minimal code example:</p>\n<div class=\"vscode-highlight-wrapper\"><pre class=\"dark-default-dark vscode-highlight\" data-language=\"python\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> asyncio</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk4\">def</span><span class=\"mtk1\"> </span><span class=\"mtk11\">main</span><span class=\"mtk1\">():</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">print</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;Hello ...&#39;</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> asyncio.sleep(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">print</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;... World!&#39;</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">asyncio.run(main())</span></span></code></pre></div>\n<p>Let’s break down the code above:</p>\n<ol>\n<li>The main thread is busy running the default event loop.</li>\n<li>The default event loop juggles multiple coroutines (starting from <code>main()</code>).</li>\n<li>Only <code>async</code> functions can use <code>await</code>.</li>\n</ol>\n<p>Let me briefly reiterate the last point. In Python, calling normal functions runs them, while calling an <code>async</code> function just instantiates a coroutine. Only <code>await</code> (or similar operators) will really schedule it for execution. Depending on the language, calling an <code>async</code> function without <code>await</code> might get some code to execute, but you won’t be able to retrieve it’s final result without using some other special concurrency mechanism. </p>\n<p>And even inside an <code>async</code> function you still have to use the <code>await</code> keyword to invoke another async function if you want to be able to inspect the result. If you want to read a funny post about this idiosyncrasy, check out  by .</p>\n<p>This is a small rant about the syntax required to express concurrency with this model, not on the internal mechanics of how a language might implement async/await internally, and I’m prefacing the main part of the article with it because I want to remind you</p>\n<h2 id=\"asyncawait-in-zig\"><a href=\"#asyncawait-in-zig\" aria-label=\"asyncawait in zig permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async/Await in Zig</h2>\n<h3 id=\"launching-the-event-loop\"><a href=\"#launching-the-event-loop\" aria-label=\"launching the event loop permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Launching the event loop</h3>\n<p>Zig is a “low level” programming language, and as such it doesn’t bundle any runtime by default. If you want an event loop, you have to ask for it. The quickest way is by adding this line next to the <code>main</code> function of your application:</p>\n<div class=\"vscode-highlight-wrapper\"><pre class=\"dark-default-dark vscode-highlight\" data-language=\"zig\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> std = </span><span class=\"mtk11\">@import</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;std&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">pub</span><span class=\"mtk1\"> </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> io_mode = .evented;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">fn</span><span class=\"mtk1\"> sayHello() !</span><span class=\"mtk4\">void</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">\tstd.debug.warn(</span><span class=\"mtk8\">&quot;Hello ...&quot;</span><span class=\"mtk1\"> \\, .{});</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">\tstd.</span><span class=\"mtk4\">async</span><span class=\"mtk1\">.sleep(</span><span class=\"mtk7\">10</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">\tstd.debug.warn(</span><span class=\"mtk8\">&quot;... World!&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">\t</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">pub</span><span class=\"mtk1\"> </span><span class=\"mtk4\">fn</span><span class=\"mtk1\"> main () !</span><span class=\"mtk4\">void</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    sayHello();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre></div>\n<p>This line loads the default event loop and launches <code>main</code> asynchronously, allowing you to use <code>await</code> in it without any fuss. There’s also more explicit ways of instantiating an event loop, but I won’t cover them as I want to talk about other aspects of async/await.</p>\n<h3 id=\"scheduling-async-functions\"><a href=\"#scheduling-async-functions\" aria-label=\"scheduling async functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scheduling async functions</h3>\n<h3 id=\"scheduling-sync-functions-\"><a href=\"#scheduling-sync-functions-\" aria-label=\"scheduling sync functions  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scheduling sync functions (!?)</h3>\n<h3 id=\"comptime-3-async\"><a href=\"#comptime-3-async\" aria-label=\"comptime 3 async permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comptime &#x3C;3 async</h3>\n<h3 id=\"the-nitty-gritty\"><a href=\"#the-nitty-gritty\" aria-label=\"the nitty gritty permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The nitty gritty</h3>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.dark-default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.dark-default-dark .mtk1 { color: #D4D4D4; }\n.dark-default-dark .mtk2 { color: #1E1E1E; }\n.dark-default-dark .mtk3 { color: #6A9955; }\n.dark-default-dark .mtk4 { color: #569CD6; }\n.dark-default-dark .mtk5 { color: #D16969; }\n.dark-default-dark .mtk6 { color: #D7BA7D; }\n.dark-default-dark .mtk7 { color: #B5CEA8; }\n.dark-default-dark .mtk8 { color: #CE9178; }\n.dark-default-dark .mtk9 { color: #646695; }\n.dark-default-dark .mtk10 { color: #4EC9B0; }\n.dark-default-dark .mtk11 { color: #DCDCAA; }\n.dark-default-dark .mtk12 { color: #9CDCFE; }\n.dark-default-dark .mtk13 { color: #000080; }\n.dark-default-dark .mtk14 { color: #F44747; }\n.dark-default-dark .mtk15 { color: #C586C0; }\n.dark-default-dark .mtk16 { color: #6796E6; }\n.dark-default-dark .mtk17 { color: #808080; }\n.dark-default-dark .mtki { font-style: italic; }\n.dark-default-dark .mtkb { font-weight: bold; }\n.dark-default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","frontmatter":{"title":"What is Zig's Async/Await?","date":"April 20, 2020","description":"An introduction to Zig's curious concurrent programming API.","notwitch":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/zig-async-await/","readingTime":{"text":"3 min read"},"previous":{"fields":{"slug":"/blog/future-online-meetups/","readingTime":{"text":"7 min read"}},"frontmatter":{"title":"The Upcoming Future of Online Meetups"}},"next":null}}}